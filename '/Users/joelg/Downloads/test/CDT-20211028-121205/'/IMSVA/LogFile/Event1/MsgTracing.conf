#
# Trend Micro Inc. 
# IMSX team, by Anthony.
# Configuration file for Message Tracing. Time unit is second by default. Configuration tuned 
# for average message speed 40 messages/s. Becareful with [Advance] section's configurations 
# and the options with "Formula" comments.
#


##############################################################################################################
# PostLogParser process reads in Postfix log, handling bookmark, produce PostfixSession object and send them to TransacAssembler
[PostLogParser]
#If there is no new log in Postfix log file, PostLogParser will sleep the interval to retry reading
PostLogReaderReadInterval=5

# The Postfix log line queue slot size. Postfix log reader thread reads every log line and put into this queue.
# Formula: average in-message speed (messages/second) * 5 * 2. Default value: 40 messages/s * 5 * 2 = 400
#   note for factors "5" and "2" in formula: every SMTP session will record 5 Postfix log lines; every message will produce two PostfixSession
PostLogLineQueueSlot=400

# Every Postfix log line will be categorized by Postfix queue id into corresponding PostLogInfoExtractor,
# if a PostLogInfoExtractor does not get the log line which remarks termination of a SMTP session before
# this interval, the PostLogInfoExtractor will be marked as expired and purged out from PostLogInfoExtractorCache.
# Unit is second.
PostLogInfoExtractorCacheExpiredInterval=2400

# The PostfixSession object queue slot size. PostfixSession sender will buffer objects in this queue and send 
# them to TransacAssembler one by one. 
# Formula: average in-message speed (messages/second) * 2. Default value: 40 messages/s * 2 = 80
#   note for factor "2" in formula: every message will produce two PostfixSession in average
PS_QueueSlot=80

PostLogBookmarkFile=/opt/trend/imss/MsgTracing/PostLogBookmark.txt

# PostLogParser will record present bookmark at reading Postfix log after reading these log lines
RecordBookmarkForLogLines=4000

# PostLogParser will record present bookmark at reading Postfix log after the interval. Unit is second.
RecordBookmarkInterval=60





##############################################################################################################
# ScanLogParser reads in policy event log, handling bookmark, produce ScanSession object and send them to TransacAssembler
[ScanLogParser]
#If there is no new log in Postfix log file, PostLogParser will sleep the interval to retry reading
ScanLogReaderReadInterval=5

# The ScanSession object queue slot size. ScanSession sender will buffer objects into this queue and send 
# them to TransacAssembler one by one. 
# Formula: average in-message speed (messages/second) * 1.5. Default value: 40 messages/s * 1.5 = 60
#   note for factor "1.5" in formula: every message will produce one and half ScanSession in average.
SS_QueueSlot=60

ScanLogBookmarkFile=/opt/trend/imss/MsgTracing/ScanLogBookmark.txt

# ScanLogParser will wait for the below period to merge the read in policy event log by the same internal message id
PeriodToMergeScanSessions = 5

# The policy event log line queue slot size. Policy event log reader thread reads every log line and put into this queue.
# Formula: SS_QueueSlot * 2.5. Expirence factor "2.5".
ScanLoglineQueueSize = 150

# The prefix name of policy event log file
ScanLogFileNameToken=polevt.imss

# The directory path of policy event log file
ScanLogFilePath=/opt/trend/imss/log

# ScanLogParser will record present bookmark at reading policy event log after reading these log lines
RecordBookmarkForLogLines=1000

# ScanLogParser will record present bookmark at reading policy event log after the interval. Unit is second.
RecordBookmarkInterval=60





##############################################################################################################
# TransacAssembler receives PostfixSession from PostLogParser and ScanSession from ScanLogParser, then produce 
# Transac object and send to TransacConsumer
[TransacAssembler]
# The Transac object queue slot size. Transac sender buffer the produced Transac object into this queue and send 
# them to Transac ObjReceiver one by one.
Transac_QueueSlot=70

# The SessionGroup expiration time. If ther is no new Session pushed into corresponding SessionGroup (grouped by 
# the same message id) after this expiration interval, the SessionGroup will be marked as expired and purged out 
# from Session Cache. Unit is second. The greater this value, the much more tolerance on log timestamp difference 
# between PostfixSession and ScanSession. The negative effect is Transac_Scan or Transac_ScanOut will be held
# in SessionGroup longer till the interval expiring.
SessionGroupExpiredInterval=3600





##############################################################################################################
# TransacConsumer buffered Transac objects received from TransacAssembler and flush them into DB
[TransacConsumer]
# The odbc.ini configuration file absolute path for PostgreSQL DB
ODBC_CFG_File=/opt/trend/imss/config/odbc.ini

# TransacConsumer will try to flush buffered Transac objects it receives (if any) into DB periodically by this interval
FlushInterval=60

# TransacConsumer will try to flush buffered Transac objects if the Transac objects bufferred up to this threshold
FlushMsgTransacThreshold=500

# TransacConsumer will release the present DB connection after this TTL and create a new connection. 
DBConnTTLMinute=180


# TransacConsumer will kill itself if one DB transaction last this long time, and then MsgTracing will restart. 
DBTransacSec=1200

##############################################################################################################
[MessageTracing]
# MessageTracing.py will check the healthy of other four woker processes (PostLogParser, ScanLogParser, 
# TransacAssembler and TransacConsumer), by periodicaly sleeping the interval,
# if finding out any worker process terminated, it will stop other processes and stop itself. Unit is second.
MonitorInterval=5





##############################################################################################################
# TestEnv is only for testing purpose. Empty for normal use.
[TestEnv]




##############################################################################################################
# Advance configurations are for special needs, seriously, 
# make sure you know exactly its meaning before change any of them
[Advance]
# Size of SessionCache in TransacAssembler. 
# Formula: SessionGroupExpiredInterval/600 * 35000
SessionCacheSize=70000

# Acknowledgement token pool size, the greater, the more Session/Transaction could be sent to ObjReceiver at a time range
AckTokenNum=70

# The upper limitation of acknowledgement token redrawing countter. ObjSender must draw a acknowledgement token
# before it sending out a oject to receiver, if token pool is empty, ObjSender will only try to redraw the token pool 
# within this limitation.
AckTokenRedrawLimit=90000

# If token pool is empty, ObjSender will sleep the interval to retry drawying. Unit is second.
# As you see, total redraw time limit = AckTokenRedrawLimit * AckTokenRedrawInterval. Exceeds this limited time,
# corresponding ObjSender thread will get terminiated, which will cause its process terminated.
AckTokenRedrawInterval=0.02

# If ObjSender could not detect the ObjReceiver, it will retry the limited times 
# with sending "test" message and waiting for "ok" feedback from ObjReceiver. 
SenderReconnectLimit=120

# If ObjSender could not detect the ObjReceiver, it will sleep the interval. Unit is second.
# (formula: retry_times * SenderReconnectIntervalDelta + SenderReconnectInterval) to retry detection
SenderReconnectInterval=1
SenderReconnectIntervalDelta=0

# The UDP port on which AckReceiver listen for Acknowledgement from PostfixSession ObjReceiver
PS_AckReceiverPort=50126

# The UDP port on which AckReceiver listen for Acknowledgement from ScanSession ObjReceiver
SS_AckReceiverPort=50136

# The UDP port on which PostfixSession Sender listen for "ok" feedback from PostfixSession ObjReceiver for "test" message
PostfixSessionSender_TestFeedbackPort=50127

# The UDP port on which ScanSession Sender listen for "ok" feedback from ScanSession ObjReceiver for "test" message
ScanSessionSender_TestFeedbackPort=50137

# The UDP port on which Transac Sender listen for "ok" feedback from Transac ObjReceiver for "test" message
TransacSender_TestFeedbackPort=50207

# The UDP port on which AckReceiver listen for Acknowledgement from Transac ObjReceiver
Transac_AckReceiverPort=50206

# The Session (PostfixSession or ScanSession) ObjReceiver's host IP address and port number, by default localhost
Session_ReceiverIP=localhost
Session_ReceiverPort=50125

# The Transac ObjReceiver's host IP address and port number, by default localhost
Transac_ReceiverIP=localhost
Transac_ReceiverPort=50205





##############################################################################################################
# Log setting for Message Tracing. 
# 1. Log level: CRITICAL, ERROR, WARNING, INFO, DEBUG
#    By default log level is INFO, which ouput enough dynamic information without flushing too many log lines.
# 2. To set all components' log level, change "level" under "logger_MsgTrace" to other one
# 3. To avoid irrelavent log output, just change more specific logger's level, likes set "level=DEBUG" under "PostLogParser"
#    to only output debug log of PostLogParser process, but leave the other module log level as "INFO".
# 4. Log rotation is controled by "handler_logfile", likes "args=('/opt/trend/imss/log/MsgTracing.log', 'a', 83886080, 5)" 
#    the digit "83886080" means file size before rotation (in bytes, here about 80MB), the digit "5" means at most keeping 
#    5 old Message Tracing log. All log name looks like "MsgTracing.log", "MsgTracing.log.1", ..., "MsgTracing.log.5".
# 5. "formatter_stdfmt" control the output log format, refer Python2.6.4 manuals "logging" chapter for usage.
# 6. More specific usage of loggers here, please refer Python2.6.4 manuals "logging" chapter.
[loggers]
keys=root, MsgTrace, Common, Session, Main, PostLogParser, ScanLogParser, Assembler, Consumer

[handlers]
keys=console, logfile, watchfile

[formatters]
keys=stdfmt

[logger_root]
level=INFO
handlers=console

[logger_MsgTrace]
level=NOTSET
handlers=console
propagate=0
qualname=MsgTrace

[logger_Common]
level=INFO
handlers=watchfile
propagate=0
qualname=MsgTrace.Common

[logger_Session]
level=INFO
handlers=watchfile
propagate=0
qualname=MsgTrace.Session

[logger_Main]
level=INFO
handlers=watchfile
propagate=0
qualname=MsgTrace.Main

[logger_PostLogParser]
level=INFO
handlers=watchfile
propagate=0
qualname=MsgTrace.PostLogParser

[logger_ScanLogParser]
level=INFO
handlers=watchfile
propagate=0
qualname=MsgTrace.ScanLogParser

[logger_Assembler]
level=INFO
handlers=logfile
propagate=0
qualname=MsgTrace.Assembler

[logger_Consumer]
level=INFO
handlers=watchfile
propagate=0
qualname=MsgTrace.Consumer

[handler_console]
class=StreamHandler
level=NOTSET
formatter=stdfmt
args=(sys.stdout,)

[handler_logfile]
class=handlers.RotatingFileHandler
level=NOTSET
formatter=stdfmt
args=('/opt/trend/imss/log/MsgTracing.log', 'a', 83886080, 5)

[handler_watchfile]
class=handlers.WatchedFileHandler
level=NOTSET
formatter=stdfmt
args=('/opt/trend/imss/log/MsgTracing.log', 'a')

[formatter_stdfmt]
format=%(asctime)s-%(levelname)s:   %(message)s. [%(module)s:%(funcName)s]
datefmt=%Y/%m/%d %H:%M:%S %Z
class=logging.Formatter
